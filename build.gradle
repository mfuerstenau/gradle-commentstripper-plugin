// set JDK_HOME to JDK7-Path
buildscript {
   repositories {
      mavenLocal ()
      mavenCentral ()
   }
   dependencies {
      classpath 'net.sf.proguard:proguard-gradle:5.2.1'
   }
}

plugins {
   id 'groovy'
   id 'maven'
   id 'com.gradle.plugin-publish' version '0.9.4'
   id 'com.github.johnrengelman.shadow' version '1.2.3'
}

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

prepareBootClasspath ()

if (!hasProperty('mainClass')) {
   ext.mainClass = ''
}

group = 'de.fuerstenau'
version = '0.1.0'

archivesBaseName = 'gradle-comment-stripper-plugin'

repositories {
   mavenCentral()
}

configurations {
   libjars
   compile.extendsFrom shadow
}

def libJars () {
   String jh = getJdk ()
   files (['rt.jar', 'jsse.jar', 'jce.jar'].collect { lib -> "${jh}/jre/lib/${lib}" })
}

dependencies {
   compile gradleApi()
   libjars 'com.google.code.findbugs:jsr305:3.0.0'
   shadow 'org.antlr:antlr4-runtime:4.5.2-1'
   libjars libJars()
}

task fatJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
   configurations = [project.configurations.shadow]
   relocate 'org.stringtemplate', 'de.fuerstenau.gradle.commentstripper.internal.org.stringtemplate'
   relocate 'org.antlr', 'de.fuerstenau.gradle.commentstripper.internal.org.antlr'
   relocate 'org.abego', 'de.fuerstenau.gradle.commentstripper.internal.org.abego'
   classifier 'all'
   with jar
}

def removeDeps = { pom ->
   pom.dependencies.removeAll(pom.dependencies.findAll {
         it.artifactId == 'antlr4' 
      })
}

task artifacts {
   group = "Help"
   description = "Displays the artifacts associated with each configuration of " + project
   doFirst {
      configurations.findAll().each { config ->
         println "${config}:"
         config.allArtifacts.getFiles().each { file ->
            println file 
         }
      }
      println ' '
   }
}



/* Artefakte des jar-Tasks entfernen */
//[configurations.runtime, configurations.archives]*.with { cfg ->
//   cfg.artifacts.removeAll { it.archiveTask.is jar }
//}


/*  AbhÃ¤ngigkeiten aus POM entfernen*/
install {
   repositories {
      mavenInstaller {
         pom.whenConfigured (removeDeps)
      }
   }
}

task proguardJar (type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
   configuration 'proguard.pro'
   printmapping "${buildDir}/libs/${archivesBaseName}-final-${version}.map"
   injars fatJar.outputs
   outjars files ("${buildDir}/libs/${archivesBaseName}-final-${version}.jar")
   libraryjars configurations.libjars.files
}

//configurations.archives.dependencies.add (dependencies.create (proguardJar))
artifacts {
   // remove (original) jar artifact added by Java plugin
   configurations.archives.artifacts.clear()
   proguardJar.outputs.files.each { File outputFile ->
      archives(outputFile) {
         name 'CommentStripperPlugin'
         builtBy proguardJar
      }
   }
}

task wrapper(type: Wrapper) {
   gradleVersion = '2.14.1'
}

test {
   testLogging {
      events "failed"
      exceptionFormat "full"
   }
}

publishPlugins.dependsOn.remove (jar)
assemble.dependsOn.remove (jar)
//project.tasks.remove(jar)
//publishPlugins.taskDependencies.values -= "jar"
//jar.enabled = false
//


def getJdk ()
{
   if (sourceCompatibility == JavaVersion.VERSION_1_6) {
      if (System.env.JDK6_HOME != null) {
         return System.env.JDK6_HOME
      } else {
         throw new GradleException ("SourceCompatibility 1.6 set but no JDK6_HOME found.")
      }
   }
   if (sourceCompatibility == JavaVersion.VERSION_1_7) {
      if (System.env.JDK7_HOME != null) {
         return System.env.JDK7_HOME
      } else {
         throw new GradleException ("SourceCompatibility 1.7 set but no JDK7_HOME found.")
      }
   }
   if (System.env.JAVA_HOME != null) {
      return System.env.JAVA_HOME
   }
   else
   {
      throw new GradleException ("Error: Cannot find JAVA_HOME.")
   }
}

def cygwinWorkaround (String s){
   // cygwin workaround
   s = s.replaceAll("/cygdrive/(\\w)/", "\$1:/")
        
}
    
    
def prepareBootClasspath () {
   String jh = getJdk ()
   tasks.withType(JavaCompile) {
      doFirst {

         options.fork = true
         options.bootClasspath = ''
         ['rt.jar', 'jsse.jar', 'jce.jar']*.with { lib ->
            options.bootClasspath += "${jh}/jre/lib/${lib}${File.pathSeparator}"
         }
         options.bootClasspath = cygwinWorkaround (options.bootClasspath)
      }
   }
}

